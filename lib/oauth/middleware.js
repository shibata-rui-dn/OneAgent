/**
 * OAuth 2.0 Ë™çË®º„Éü„Éâ„É´„Ç¶„Çß„Ç¢Ôºà„Éá„ÉÉ„Éâ„É≠„ÉÉ„ÇØ‰øÆÊ≠£ÁâàÔºâ
 * „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÅÆÁÑ°ÂäπÂåñ„Å®„Éà„Éº„ÇØ„É≥Ê§úË®º„ÅÆÈ´òÈÄüÂåñ
 */

import express from 'express';
import session from 'express-session';
import { CONFIG } from '../config/config.js';

/**
 * Bearer „Éà„Éº„ÇØ„É≥ÊäΩÂá∫
 */
function extractBearerToken(req) {
  const authHeader = req.headers.authorization;
  if (authHeader && authHeader.startsWith('Bearer ')) {
    return authHeader.slice(7);
  }
  return null;
}

/**
 * Âü∫Êú¨Ë™çË®º„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàÈ´òÈÄüÂåñÁâàÔºâ
 */
export function createAuthMiddleware(database) {
  return (req, res, next) => {
    console.log(`üîç [AUTH] „É™„ÇØ„Ç®„Çπ„ÉàÈñãÂßã: ${req.method} ${req.path}`);
    
    const token = extractBearerToken(req);
    
    if (!token) {
      console.log(`üîç [AUTH] „Éà„Éº„ÇØ„É≥„Å™„Åó`);
      return res.status(401).json({ 
        error: 'unauthorized',
        error_description: 'Bearer token required'
      });
    }

    console.log(`üîç [AUTH] „Éà„Éº„ÇØ„É≥Ê§úË®ºÈñãÂßã`);
    const decoded = database.validateTokenSync(token);
    
    if (!decoded) {
      console.log(`üîç [AUTH] „Éà„Éº„ÇØ„É≥Ê§úË®ºÂ§±Êïó`);
      return res.status(401).json({ 
        error: 'invalid_token',
        error_description: 'Invalid or expired token'
      });
    }

    console.log(`üîç [AUTH] „Éà„Éº„ÇØ„É≥Ê§úË®ºÊàêÂäü: ${decoded.user.username}`);
    
    req.user = decoded.user;
    req.scopes = decoded.scope.split(' ');
    req.tokenInfo = {
      jti: decoded.jti,
      clientId: decoded.client_id,
      issuedAt: new Date(decoded.iat * 1000),
      expiresAt: new Date(decoded.exp * 1000),
      token: token
    };

    console.log(`üîç [AUTH] next()Âëº„Å≥Âá∫„Åó`);
    next();
  };
}

/**
 * „Çπ„Ç≥„Éº„Éó„Éô„Éº„ÇπË™çÂèØ„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàËªΩÈáèÁâàÔºâ
 */
export function requireScope(requiredScopes) {
  if (typeof requiredScopes === 'string') {
    requiredScopes = [requiredScopes];
  }

  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        error: 'unauthorized',
        error_description: 'Authentication required'
      });
    }

    const userScopes = req.scopes || [];
    
    // ÁÆ°ÁêÜËÄÖ„Çπ„Ç≥„Éº„Éó„Åå„ÅÇ„Çå„Å∞ÂÖ®„Å¶„ÅÆ„É™„ÇΩ„Éº„Çπ„Å´„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ
    if (userScopes.includes('admin')) {
      return next();
    }

    // ÂøÖË¶Å„Å™„Çπ„Ç≥„Éº„Éó„ÅÆ„ÅÑ„Åö„Çå„Åã„ÇíÊåÅ„Å£„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const hasRequiredScope = requiredScopes.some(scope => userScopes.includes(scope));
    
    if (!hasRequiredScope) {
      // üîß ‰øÆÊ≠£: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇíÂâäÈô§
      if (CONFIG.DEBUG.VERBOSE_LOGGING) {
        console.warn(`üîí „Çπ„Ç≥„Éº„Éó‰∏çË∂≥: ${req.user.username} (ÂøÖË¶Å: ${requiredScopes.join(', ')}, ÂÆüÈöõ: ${userScopes.join(', ')})`);
      }

      return res.status(403).json({
        error: 'insufficient_scope',
        error_description: `Required scope: ${requiredScopes.join(' or ')}`,
        scope: requiredScopes.join(' ')
      });
    }

    next();
  };
}

/**
 * „É≠„Éº„É´„Éô„Éº„ÇπË™çÂèØ„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàËªΩÈáèÁâàÔºâ
 */
export function requireRole(requiredRoles) {
  if (typeof requiredRoles === 'string') {
    requiredRoles = [requiredRoles];
  }

  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        error: 'unauthorized',
        error_description: 'Authentication required'
      });
    }

    const userRoles = req.user.roles || [];
    const hasRequiredRole = requiredRoles.some(role => userRoles.includes(role));
    
    if (!hasRequiredRole) {
      // üîß ‰øÆÊ≠£: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇíÂâäÈô§
      if (CONFIG.DEBUG.VERBOSE_LOGGING) {
        console.warn(`üîí Ê®©Èôê‰∏çË∂≥: ${req.user.username} (ÂøÖË¶Å: ${requiredRoles.join(', ')}, ÂÆüÈöõ: ${userRoles.join(', ')})`);
      }

      return res.status(403).json({
        error: 'access_denied',
        error_description: `Required role: ${requiredRoles.join(' or ')}`
      });
    }

    next();
  };
}

/**
 * ÁÆ°ÁêÜËÄÖÈôêÂÆö„Éü„Éâ„É´„Ç¶„Çß„Ç¢
 */
export function requireAdmin() {
  return (req, res, next) => {
    console.log(`üîç [ADMIN] ÁÆ°ÁêÜËÄÖ„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã: ${req.user?.username}`);
    
    if (!req.user) {
      console.log(`üîç [ADMIN] „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å™„Åó`);
      return res.status(401).json({
        error: 'unauthorized',
        error_description: 'Authentication required'
      });
    }

    const userRoles = req.user.roles || [];
    const hasAdminRole = userRoles.includes('admin');
    
    if (!hasAdminRole) {
      console.log(`üîç [ADMIN] ÁÆ°ÁêÜËÄÖÊ®©Èôê„Å™„Åó: ${userRoles}`);
      return res.status(403).json({
        error: 'access_denied',
        error_description: 'Admin role required'
      });
    }

    console.log(`üîç [ADMIN] ÁÆ°ÁêÜËÄÖÊ®©ÈôêÁ¢∫Ë™ç„ÄÅnext()Âëº„Å≥Âá∫„Åó`);
    next();
  };
}

/**
 * „Ç™„Éó„Ç∑„Éß„Éä„É´Ë™çË®º„Éü„Éâ„É´„Ç¶„Çß„Ç¢
 */
export function optionalAuth(database) {
  return (req, res, next) => {
    const token = extractBearerToken(req);
    
    if (token) {
      // üîß ‰øÆÊ≠£: ÂêåÊúüÁöÑ„Å™„Éà„Éº„ÇØ„É≥Ê§úË®º
      const decoded = database.validateTokenSync(token);
      if (decoded) {
        req.user = decoded.user;
        req.scopes = decoded.scope.split(' ');
        req.tokenInfo = {
          jti: decoded.jti,
          clientId: decoded.client_id,
          issuedAt: new Date(decoded.iat * 1000),
          expiresAt: new Date(decoded.exp * 1000)
        };
      }
    }

    next();
  };
}

/**
 * „É™„ÇΩ„Éº„Çπ„Ç™„Éº„Éä„ÉºÊ§úË®º„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàËªΩÈáèÁâàÔºâ
 */
export function requireResourceOwner(userIdExtractor) {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        error: 'unauthorized',
        error_description: 'Authentication required'
      });
    }

    // ÁÆ°ÁêÜËÄÖ„ÅØÂÖ®„Å¶„ÅÆ„É™„ÇΩ„Éº„Çπ„Å´„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ
    if (req.user.roles && req.user.roles.includes('admin')) {
      return next();
    }

    const resourceUserId = typeof userIdExtractor === 'function' 
      ? userIdExtractor(req) 
      : req.params[userIdExtractor || 'userId'];

    if (req.user.id !== resourceUserId) {
      // üîß ‰øÆÊ≠£: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇíÂâäÈô§
      if (CONFIG.DEBUG.VERBOSE_LOGGING) {
        console.warn(`üîí „É™„ÇΩ„Éº„Çπ„Ç¢„ÇØ„Çª„ÇπÊãíÂê¶: ${req.user.username} -> ${resourceUserId}`);
      }

      return res.status(403).json({
        error: 'access_denied',
        error_description: 'Access to this resource is forbidden'
      });
    }

    next();
  };
}

/**
 * „É¨„Éº„ÉàÂà∂Èôê„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàËªΩÈáèÁâàÔºâ
 */
export function createRateLimitMiddleware() {
  const requests = new Map();
  const WINDOW_SIZE = CONFIG.SECURITY.RATE_LIMIT_WINDOW;
  const MAX_REQUESTS = CONFIG.SECURITY.RATE_LIMIT_MAX;

  // Âè§„ÅÑ„Ç®„É≥„Éà„É™„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºàÈñìÈöî„ÇíÈï∑„Åè„Åó„Å¶Ë≤†Ëç∑ËªΩÊ∏õÔºâ
  setInterval(() => {
    const now = Date.now();
    for (const [key, timestamps] of requests.entries()) {
      const validTimestamps = timestamps.filter(time => now - time < WINDOW_SIZE);
      if (validTimestamps.length === 0) {
        requests.delete(key);
      } else {
        requests.set(key, validTimestamps);
      }
    }
  }, WINDOW_SIZE / 2); // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñìÈöî„ÇíÂçäÂàÜ„Å´

  return (req, res, next) => {
    const identifier = req.user?.id || req.ip;
    const now = Date.now();
    
    if (!requests.has(identifier)) {
      requests.set(identifier, []);
    }

    const timestamps = requests.get(identifier);
    const recentRequests = timestamps.filter(time => now - time < WINDOW_SIZE);
    
    if (recentRequests.length >= MAX_REQUESTS) {
      const resetTime = Math.ceil((recentRequests[0] + WINDOW_SIZE - now) / 1000);
      
      res.setHeader('X-RateLimit-Limit', MAX_REQUESTS);
      res.setHeader('X-RateLimit-Remaining', 0);
      res.setHeader('X-RateLimit-Reset', resetTime);
      
      // üîß ‰øÆÊ≠£: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇíÂâäÈô§
      if (CONFIG.DEBUG.VERBOSE_LOGGING) {
        console.warn(`üîí „É¨„Éº„ÉàÂà∂Èôê: ${identifier} (${recentRequests.length}/${MAX_REQUESTS})`);
      }

      return res.status(429).json({
        error: 'rate_limit_exceeded',
        error_description: 'Too many requests',
        retry_after: resetTime
      });
    }

    recentRequests.push(now);
    requests.set(identifier, recentRequests);

    res.setHeader('X-RateLimit-Limit', MAX_REQUESTS);
    res.setHeader('X-RateLimit-Remaining', MAX_REQUESTS - recentRequests.length);

    next();
  };
}

/**
 * IPÂà∂Èôê„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàËªΩÈáèÁâàÔºâ
 */
export function createIPWhitelistMiddleware(allowedIPs = []) {
  if (CONFIG.NODE_ENV === 'development') {
    // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØÂà∂Èôê„Å™„Åó
    return (req, res, next) => next();
  }

  return (req, res, next) => {
    const clientIP = req.ip || req.connection.remoteAddress;
    
    if (allowedIPs.length > 0 && !allowedIPs.includes(clientIP)) {
      // üîß ‰øÆÊ≠£: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇíÂâäÈô§
      if (CONFIG.DEBUG.VERBOSE_LOGGING) {
        console.warn(`üîí IPÂà∂Èôê: ${clientIP}`);
      }

      return res.status(403).json({
        error: 'access_denied',
        error_description: 'Access from this IP address is not allowed'
      });
    }

    next();
  };
}

/**
 * „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„Éº„Éü„Éâ„É´„Ç¶„Çß„Ç¢
 */
export function securityHeaders() {
  return (req, res, next) => {
    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„Éº„ÅÆË®≠ÂÆö
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    
    if (CONFIG.SECURITY.FORCE_HTTPS) {
      res.setHeader('Strict-Transport-Security', 
        `max-age=${CONFIG.SECURITY.HSTS_MAX_AGE}; includeSubDomains; preload`);
    }

    if (CONFIG.SECURITY.CONTENT_SECURITY_POLICY) {
      res.setHeader('Content-Security-Policy', 
        "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;");
    }

    next();
  };
}

/**
 * CORSË®≠ÂÆö„Éü„Éâ„É´„Ç¶„Çß„Ç¢
 */
export function createCorsMiddleware() {
  return (req, res, next) => {
    const origin = req.headers.origin;
    const allowedOrigins = CONFIG.CORS.ORIGINS;

    if (allowedOrigins.includes('*') || allowedOrigins.includes(origin)) {
      res.setHeader('Access-Control-Allow-Origin', origin || '*');
    }

    if (CONFIG.CORS.CREDENTIALS) {
      res.setHeader('Access-Control-Allow-Credentials', 'true');
    }

    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 
      'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    res.setHeader('Access-Control-Max-Age', CONFIG.CORS.MAX_AGE);

    if (req.method === 'OPTIONS') {
      res.status(200).end();
      return;
    }

    next();
  };
}

/**
 * „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Éü„Éâ„É´„Ç¶„Çß„Ç¢ÔºàËªΩÈáèÁâàÔºâ
 */
export function errorHandler() {
  return (error, req, res, next) => {
    console.error('‚ùå API „Ç®„É©„Éº:', error);

    // üîß ‰øÆÊ≠£: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É≠„Ç∞„ÇíÂâäÈô§

    // JWTÈñ¢ÈÄ£„Ç®„É©„Éº
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        error: 'invalid_token',
        error_description: 'Invalid JWT token'
      });
    }

    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        error: 'invalid_token',
        error_description: 'Token has expired'
      });
    }

    // ‰∏ÄËà¨ÁöÑ„Å™„Ç®„É©„Éº
    const statusCode = error.statusCode || error.status || 500;
    const errorResponse = {
      error: error.code || 'server_error',
      error_description: CONFIG.NODE_ENV === 'production' 
        ? 'Internal server error' 
        : error.message
    };

    if (CONFIG.DEBUG.ENABLED && error.stack) {
      errorResponse.debug = error.stack;
    }

    res.status(statusCode).json(errorResponse);
  };
}

/**
 * „Éü„Éâ„É´„Ç¶„Çß„Ç¢Áµ±Ë®àÊÉÖÂ†±ÂèñÂæóÔºàËªΩÈáèÁâàÔºâ
 */
export function getMiddlewareStats() {
  return {
    activeRequests: 0,
    totalRequests: 0,
    blockedRequests: 0,
    rateLimitViolations: 0,
    securityLogEnabled: false, // üîß ‰øÆÊ≠£: Â∏∏„Å´ÁÑ°Âäπ
    securityLogMode: 'disabled' // üîß ‰øÆÊ≠£: ÁÑ°ÂäπÂåñ
  };
}

/**
 * „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂÖ±ÈÄö„Éü„Éâ„É´„Ç¶„Çß„Ç¢„Çí‰∏ÄÊã¨Ë®≠ÂÆö
 */
export function setupMiddleware(app, oauthSystem) {
  // JSON „Éú„Éá„Ç£„Éë„Éº„Çπ
  app.use(express.json({ limit: '200mb' }));  
  app.use(express.urlencoded({ 
    extended: false, 
    limit: '200mb' 
  }));

  // „Çª„ÉÉ„Ç∑„Éß„É≥
  app.use(session({
    secret: CONFIG.SESSION.SECRET,
    resave: false,
    saveUninitialized: false,
    cookie: {
      maxAge: CONFIG.SESSION.MAX_AGE,
      secure: CONFIG.SESSION.SECURE,
      httpOnly: CONFIG.SESSION.HTTP_ONLY,
      sameSite: CONFIG.SESSION.SAME_SITE
    }
  }));

  // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„Éº
  app.use(oauthSystem.middleware.security);

  // CORS
  app.use(oauthSystem.middleware.cors);

  // „É¨„Éº„ÉàÂà∂Èôê
  app.use(oauthSystem.middleware.rateLimit);

  // „Ç®„É©„Éº„Éè„É≥„Éâ„É©„ÅØÊúÄÂæå„Å´
  app.use(oauthSystem.middleware.errorHandler);
}